package com.malware.demo.auth;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
public class SecurityConfig {

    private final TokenFilter tokenFilter;
    private final AuthEntrypoint authEntrypoint;
    private final AccessRestrictedHandler accessRestrictedHandler;

    public SecurityConfig(TokenFilter tokenFilter, AuthEntrypoint authEntrypoint, AccessRestrictedHandler accessRestrictedHandler) {
        this.tokenFilter = tokenFilter;
        this.authEntrypoint = authEntrypoint;
        this.accessRestrictedHandler = accessRestrictedHandler;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http
                .csrf().disable()
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
                .authorizeHttpRequests(
                        req -> req
                                .requestMatchers("/user/**").permitAll()
                                .requestMatchers("/admin/**").hasAuthority("ADMIN")
                                .requestMatchers("/manager/**").hasAuthority("MANAGER")
                )
                .exceptionHandling()
                .authenticationEntryPoint(authEntrypoint)
                .accessDeniedHandler(accessRestrictedHandler)
                .and()
                .addFilterBefore(tokenFilter, UsernamePasswordAuthenticationFilter.class)
                .build();
    }

}
