package com.malware.demo.auth;

import com.malware.demo.service.UserDetailService;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.util.PathMatcher;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Configuration
public class TokenFilter extends OncePerRequestFilter {

    private final PathMatcher pathMatcher;
    private final UserDetailService userDetailService;

    public TokenFilter(PathMatcher pathMatcher, UserDetailService userDetailService) {
        this.pathMatcher = pathMatcher;
        this.userDetailService = userDetailService;
    }

    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) {
        return pathMatcher.match("api/**", request.getRequestURI());
    }

    @Override
    protected void doFilterInternal(
            HttpServletRequest request,
            HttpServletResponse response,
            FilterChain filterChain
    ) throws ServletException, IOException {
        try {
            String auth = request.getHeader("auth");
            if (auth == null) throw new IllegalArgumentException("TOKEN NOT FOUND");

            UserDetails userDetails = userDetailService.loadUserByUsername(auth);
            UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(
                    userDetails,
                    userDetails.getPassword(),
                    userDetails.getAuthorities()
            );
            SecurityContextHolder.getContext().setAuthentication(token);
            filterChain.doFilter(request, response);
        } catch (UsernameNotFoundException e) {
            request.setAttribute("message", "INVALID USERNAME");
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
        } catch (IllegalArgumentException e) {
            request.setAttribute("message", e.getMessage());
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
        }
    }
}
